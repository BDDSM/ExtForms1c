
////////////////////////////////////////////////////////////////////////////////
// ПОЛУЧЕНИЕ ОПИСАНИЙ ПОЛНОМОЧИЙ НА ОБЪЕКТЫ

Функция ПолучитьСтруктуруТаблицы(ТипТаблицы)
	
	ОбъявлениеТаблицы = Новый ТаблицаЗначений;
	
	Если ТипТаблицы = "Доступы" Тогда
		ОбъявлениеТаблицы.Колонки.Добавить("ВидМетаданных");
		ОбъявлениеТаблицы.Колонки.Добавить("ПравоДоступа");
		ОбъявлениеТаблицы.Колонки.Добавить("Представление");
		ОбъявлениеТаблицы.Колонки.Добавить("ПоддерживаетОграничения", Новый ОписаниеТипов("Булево"));
	ИначеЕсли ТипТаблицы = "Метаданные" Тогда
		ОбъявлениеТаблицы.Колонки.Добавить("Имя");
		ОбъявлениеТаблицы.Колонки.Добавить("Представление");
		ОбъявлениеТаблицы.Колонки.Добавить("ЗаголовокШапки");
	КонецЕсли;
	
	Возврат ОбъявлениеТаблицы;
	
КонецФункции

Процедура ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, ВидМетаданных, ПравоДоступа, Представление = "", ПоддерживаетОграничения = Ложь)
	
	НоваяСтрока = ТаблицаВидовДоступа.Добавить();
	НоваяСтрока.ВидМетаданных = ВидМетаданных;
	НоваяСтрока.ПравоДоступа  = ПравоДоступа;
	НоваяСтрока.Представление = ?(ПустаяСтрока(Представление), ПравоДоступа, Представление);
	НоваяСтрока.ПоддерживаетОграничения = ПоддерживаетОграничения;
	
КонецПроцедуры

Процедура ДобавитьСтрокуВТаблицуМетаданных(ТаблицаМетаданных, Имя, Представление, ЗаголовокШапки)
	
	НоваяСтрока = ТаблицаМетаданных.Добавить();
	НоваяСтрока.Имя            = Имя;
	НоваяСтрока.Представление  = Представление;
	НоваяСтрока.ЗаголовокШапки = ЗаголовокШапки;
	
КонецПроцедуры

Функция ТаблицаПравКонфигурация()
	
	ТаблицаВидовДоступа = ПолучитьСтруктуруТаблицы("Доступы");
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "Конфигурация", "Администрирование");
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "Конфигурация", "АдминистрированиеДанных", "Админ-ие данных");
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "Конфигурация", "ОбновлениеКонфигурацииБазыДанных", "Обновление конфигурации БД");
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "Конфигурация", "МонопольныйРежим", "Монопольный режим");
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "Конфигурация", "АктивныеПользователи", "Активные пользователи");
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "Конфигурация", "ЖурналРегистрации", "Журнал регистрации");
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "Конфигурация", "ТонкийКлиент", "Тонкий клиент");
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "Конфигурация", "ВебКлиент", "Веб-клиент");
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "Конфигурация", "ТолстыйКлиент", "Толстый клиент");
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "Конфигурация", "ВнешнееСоединение", "Внешнее соединение");
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "Конфигурация", "Automation");
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "Конфигурация", "РежимВсеФункции", "Режим 'Все функции'");
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "Конфигурация", "СохранениеДанныхПользователя", "Сохранение данных пользователя");
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "Конфигурация", "ИнтерактивноеОткрытиеВнешнихОтчетов", "Открытие внешних отчетов");
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "Конфигурация", "ИнтерактивноеОткрытиеВнешнихОбработок", "Открытие внешних обработок");
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "Конфигурация", "Вывод");
	
	Если ВерсияПлатформы8_3_6 Тогда
		ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "Конфигурация", "АдминистрированиеРасширенийКонфигурации", "Админ-ие расширений конф.");
	КонецЕсли;
	
	Возврат ТаблицаВидовДоступа;
	
КонецФункции

Функция ТаблицаПравОбщие()
	
	// ОПИСАНИЕ МЕТАДАННЫХ
	ТаблицаОбъектовМетаданных = ПолучитьСтруктуруТаблицы("Метаданные");
	// Общие объекты
	ДобавитьСтрокуВТаблицуМетаданных(ТаблицаОбъектовМетаданных, "Подсистемы", "Подсистемы", "Подсистема");
	ДобавитьСтрокуВТаблицуМетаданных(ТаблицаОбъектовМетаданных, "ПараметрыСеанса", "Параметры сеанса", "Параметр сеанса");
	ДобавитьСтрокуВТаблицуМетаданных(ТаблицаОбъектовМетаданных, "ОбщиеРеквизиты", "Общие реквизиты", "Общий реквизит");
	ДобавитьСтрокуВТаблицуМетаданных(ТаблицаОбъектовМетаданных, "ПланыОбмена", "Планы обмена", "План обмена");
	ДобавитьСтрокуВТаблицуМетаданных(ТаблицаОбъектовМетаданных, "КритерииОтбора", "Критерии отбора", "Критерий отбора");
	ДобавитьСтрокуВТаблицуМетаданных(ТаблицаОбъектовМетаданных, "ОбщиеФормы", "Общие формы", "Общая форма");
	ДобавитьСтрокуВТаблицуМетаданных(ТаблицаОбъектовМетаданных, "ОбщиеКоманды", "Общие команды", "Общая команда");
	ДобавитьСтрокуВТаблицуМетаданных(ТаблицаОбъектовМетаданных, "Интерфейсы", "Интерфейсы", "Интерфейс");
	
	// Основные объекты
	ДобавитьСтрокуВТаблицуМетаданных(ТаблицаОбъектовМетаданных, "Константы", "Константы", "Константа");
	ДобавитьСтрокуВТаблицуМетаданных(ТаблицаОбъектовМетаданных, "Справочники", "Справочники", "Вид справочника");
	ДобавитьСтрокуВТаблицуМетаданных(ТаблицаОбъектовМетаданных, "Документы", "Документы", "Вид документа");
	ДобавитьСтрокуВТаблицуМетаданных(ТаблицаОбъектовМетаданных, "Последовательности", "Последовательности", "Последовательность");
	ДобавитьСтрокуВТаблицуМетаданных(ТаблицаОбъектовМетаданных, "ЖурналыДокументов", "Журналы документов", "Журнал документов");
	ДобавитьСтрокуВТаблицуМетаданных(ТаблицаОбъектовМетаданных, "РегистрыСведений", "Регистры сведений", "Вид регистра");
	ДобавитьСтрокуВТаблицуМетаданных(ТаблицаОбъектовМетаданных, "РегистрыНакопления", "Регистры накопления", "Вид регистра");
	ДобавитьСтрокуВТаблицуМетаданных(ТаблицаОбъектовМетаданных, "РегистрыБухгалтерии", "Регистры бухгалтерии", "Вид регистра");
	ДобавитьСтрокуВТаблицуМетаданных(ТаблицаОбъектовМетаданных, "РегистрыРасчета", "Регистры расчета", "Вид регистра");
	ДобавитьСтрокуВТаблицуМетаданных(ТаблицаОбъектовМетаданных, "ПланыСчетов", "Планы счетов", "План счетов");
	ДобавитьСтрокуВТаблицуМетаданных(ТаблицаОбъектовМетаданных, "ПланыВидовХарактеристик", "Планы видов характеристик", "ПВХ");
	ДобавитьСтрокуВТаблицуМетаданных(ТаблицаОбъектовМетаданных, "ПланыВидовРасчета", "Планы видов расчета", "ПВР");
	ДобавитьСтрокуВТаблицуМетаданных(ТаблицаОбъектовМетаданных, "ПланыОбмена", "Планы обмена", "План обмена");
	ДобавитьСтрокуВТаблицуМетаданных(ТаблицаОбъектовМетаданных, "БизнесПроцессы", "Бизнес-процессы", "Бизнес-процесс");
	ДобавитьСтрокуВТаблицуМетаданных(ТаблицаОбъектовМетаданных, "Задачи", "Задачи", "Задача");
	ДобавитьСтрокуВТаблицуМетаданных(ТаблицаОбъектовМетаданных, "Отчеты", "Отчеты", "Отчет");
	ДобавитьСтрокуВТаблицуМетаданных(ТаблицаОбъектовМетаданных, "Обработки", "Обработки", "Обработка");
	ДобавитьСтрокуВТаблицуМетаданных(ТаблицаОбъектовМетаданных, "ВнешниеИсточникиДанных", "Внешние источники данных", "Внешний источник данных");
	
	// ОПИСАНИЕ ВИДОВ ДОСТУПА
	ТаблицаВидовДоступа = ПолучитьСтруктуруТаблицы("Доступы");
	// Общие объекты
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "Подсистемы", "Просмотр");
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "ПараметрыСеанса", "Получение");
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "ПараметрыСеанса", "Установка");
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "ОбщиеРеквизиты", "Просмотр");
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "ОбщиеРеквизиты", "Редактирование");
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "Интерфейсы", "Использование");
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "КритерииОтбора", "Просмотр");
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "ОбщиеФормы", "Просмотр");
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "ОбщиеКоманды", "Просмотр");
	
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "ПланыОбмена", "Чтение", , Истина);
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "ПланыОбмена", "Добавление", , Истина);
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "ПланыОбмена", "Изменение", , Истина);
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "ПланыОбмена", "Удаление", , Истина);
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "ПланыОбмена", "Просмотр");
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "ПланыОбмена", "ИнтерактивноеДобавление", "Интеракт. добавление");
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "ПланыОбмена", "ИнтерактивноеУдаление", "Интеракт. удаление");
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "ПланыОбмена", "ИнтерактивнаяПометкаУдаления", "Интеракт. пометка удаления");
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "ПланыОбмена", "ИнтерактивноеСнятиеПометкиУдаления", "Интеракт. снятие пометки удаления");
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "ПланыОбмена", "ИнтерактивноеУдалениеПомеченных", "Интеракт. удаление помеченных");
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "ПланыОбмена", "ВводПоСтроке", "Ввод по строке");
	
	// Основные объекты
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "Константы", "Чтение");
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "Константы", "Изменение");
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "Константы", "Просмотр");
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "Константы", "Редактирование");
	
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "Справочники", "Чтение", , Истина);
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "Справочники", "Добавление", , Истина);
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "Справочники", "Изменение", , Истина);
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "Справочники", "Удаление", , Истина);
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "Справочники", "Просмотр");
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "Справочники", "ИнтерактивноеДобавление", "Инт. добавление");
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "Справочники", "Редактирование");
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "Справочники", "ИнтерактивноеУдаление", "Инт. удаление");
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "Справочники", "ИнтерактивнаяПометкаУдаления", "Инт. пом. удал.");
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "Справочники", "ИнтерактивноеСнятиеПометкиУдаления", "Инт. снятие пом. удал.");
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "Справочники", "ИнтерактивноеУдалениеПомеченных", "Инт. удал. помеченных");
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "Справочники", "ВводПоСтроке", "Ввод по строке");
	
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "Документы", "Чтение", , Истина);
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "Документы", "Добавление", , Истина);
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "Документы", "Изменение", , Истина);
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "Документы", "Удаление", , Истина);
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "Документы", "Проведение");
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "Документы", "ОтменаПроведения", "Отм. проведения");
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "Документы", "Просмотр");
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "Документы", "ИнтерактивноеДобавление", "Инт. добавление");
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "Документы", "Редактирование");
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "Документы", "ИнтерактивноеУдаление", "Инт. удаление");
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "Документы", "ИнтерактивнаяПометкаУдаления", "Инт. пом. удал.");
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "Документы", "ИнтерактивноеСнятиеПометкиУдаления", "Инт. снятие пом. удал.");
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "Документы", "ИнтерактивноеУдалениеПомеченных", "Инт. удал. помеченных");
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "Документы", "ИнтерактивноеПроведение", "Инт. проведение");
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "Документы", "ИнтерактивноеПроведениеНеОперативное", "Инт. проведение неопер.");
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "Документы", "ИнтерактивнаяОтменаПроведения", "Инт. отм. проведения");
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "Документы", "ИнтерактивноеИзменениеПроведенных", "Инт. изм. проведенных");
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "Документы", "ВводПоСтроке", "Ввод по строке");
	
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "Последовательности", "Чтение");
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "Последовательности", "Изменение");
	
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "ЖурналыДокументов", "Чтение", , Истина);
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "ЖурналыДокументов", "Просмотр");
	
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "РегистрыСведений", "Чтение", , Истина);
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "РегистрыСведений", "Изменение", , Истина);
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "РегистрыСведений", "Просмотр");
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "РегистрыСведений", "Редактирование");
	
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "РегистрыНакопления", "Чтение", , Истина);
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "РегистрыНакопления", "Изменение", , Истина);
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "РегистрыНакопления", "Просмотр");
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "РегистрыНакопления", "Редактирование");
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "РегистрыНакопления", "УправлениеИтогами", "Управление итогами");
	
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "РегистрыБухгалтерии", "Чтение", , Истина);
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "РегистрыБухгалтерии", "Изменение", , Истина);
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "РегистрыБухгалтерии", "Просмотр");
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "РегистрыБухгалтерии", "Редактирование");
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "РегистрыБухгалтерии", "УправлениеИтогами", "Управление итогами");
	
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "РегистрыРасчета", "Чтение", , Истина);
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "РегистрыРасчета", "Изменение", , Истина);
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "РегистрыРасчета", "Просмотр");
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "РегистрыРасчета", "Редактирование");
	
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "ПланыСчетов", "Чтение", , Истина);
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "ПланыСчетов", "Добавление", , Истина);
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "ПланыСчетов", "Изменение", , Истина);
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "ПланыСчетов", "Удаление", , Истина);
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "ПланыСчетов", "Просмотр");
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "ПланыСчетов", "ИнтерактивноеДобавление", "Инт. добавление");
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "ПланыСчетов", "Редактирование");
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "ПланыСчетов", "ИнтерактивноеУдаление", "Инт. удаление");
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "ПланыСчетов", "ИнтерактивнаяПометкаУдаления", "Инт. пом. удал.");
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "ПланыСчетов", "ИнтерактивноеСнятиеПометкиУдаления", "Инт. снятие пом. удал.");
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "ПланыСчетов", "ИнтерактивноеУдалениеПомеченных", "Инт. удал. помеченных");
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "ПланыСчетов", "ВводПоСтроке", "Ввод по строке");
	
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "ПланыВидовХарактеристик", "Чтение", , Истина);
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "ПланыВидовХарактеристик", "Добавление", , Истина);
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "ПланыВидовХарактеристик", "Изменение", , Истина);
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "ПланыВидовХарактеристик", "Удаление", , Истина);
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "ПланыВидовХарактеристик", "Просмотр");
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "ПланыВидовХарактеристик", "ИнтерактивноеДобавление", "Инт. добавление");
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "ПланыВидовХарактеристик", "Редактирование");
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "ПланыВидовХарактеристик", "ИнтерактивноеУдаление", "Инт. удаление");
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "ПланыВидовХарактеристик", "ИнтерактивнаяПометкаУдаления", "Инт. пом. удал.");
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "ПланыВидовХарактеристик", "ИнтерактивноеСнятиеПометкиУдаления", "Инт. снятие пом. удал.");
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "ПланыВидовХарактеристик", "ИнтерактивноеУдалениеПомеченных", "Инт. удал. помеченных");
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "ПланыВидовХарактеристик", "ВводПоСтроке", "Ввод по строке");
	
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "ПланыВидовРасчета", "Чтение", , Истина);
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "ПланыВидовРасчета", "Добавление", , Истина);
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "ПланыВидовРасчета", "Изменение", , Истина);
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "ПланыВидовРасчета", "Удаление", , Истина);
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "ПланыВидовРасчета", "Просмотр");
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "ПланыВидовРасчета", "ИнтерактивноеДобавление", "Инт. добавление");
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "ПланыВидовРасчета", "Редактирование");
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "ПланыВидовРасчета", "ИнтерактивноеУдаление", "Инт. удаление");
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "ПланыВидовРасчета", "ИнтерактивнаяПометкаУдаления", "Инт. пом. удал.");
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "ПланыВидовРасчета", "ИнтерактивноеСнятиеПометкиУдаления", "Инт. снятие пом. удал.");
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "ПланыВидовРасчета", "ИнтерактивноеУдалениеПомеченных", "Инт. удал. помеченных");
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "ПланыВидовРасчета", "ВводПоСтроке", "Ввод по строке");
	
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "БизнесПроцессы", "Чтение", , Истина);
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "БизнесПроцессы", "Добавление", , Истина);
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "БизнесПроцессы", "Изменение", , Истина);
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "БизнесПроцессы", "Удаление", , Истина);
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "БизнесПроцессы", "Просмотр");
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "БизнесПроцессы", "ИнтерактивноеДобавление", "Инт. добавление");
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "БизнесПроцессы", "Редактирование");
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "БизнесПроцессы", "ИнтерактивноеУдаление", "Инт. удаление");
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "БизнесПроцессы", "ИнтерактивнаяПометкаУдаления", "Инт. пом. удал.");
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "БизнесПроцессы", "ИнтерактивноеСнятиеПометкиУдаления", "Инт. снятие пом. удал.");
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "БизнесПроцессы", "ИнтерактивноеУдалениеПомеченных", "Инт. удал. помеченных");
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "БизнесПроцессы", "ВводПоСтроке", "Ввод по строке");
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "БизнесПроцессы", "ИнтерактивнаяАктивация", "Инт. активация");
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "БизнесПроцессы", "Старт");
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "БизнесПроцессы", "ИнтерактивныйСтарт", "Инт. старт");
	
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "Задачи", "Чтение", , Истина);
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "Задачи", "Добавление", , Истина);
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "Задачи", "Изменение", , Истина);
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "Задачи", "Удаление", , Истина);
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "Задачи", "Просмотр");
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "Задачи", "ИнтерактивноеДобавление", "Инт. добавление");
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "Задачи", "Редактирование");
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "Задачи", "ИнтерактивноеУдаление", "Инт. удаление");
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "Задачи", "ИнтерактивнаяПометкаУдаления", "Инт. пом. удал.");
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "Задачи", "ИнтерактивноеСнятиеПометкиУдаления", "Инт. снятие пом. удал.");
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "Задачи", "ИнтерактивноеУдалениеПомеченных", "Инт. удал. помеченных");
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "Задачи", "ВводПоСтроке", "Ввод по строке");
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "Задачи", "ИнтерактивнаяАктивация", "Инт. активация");
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "Задачи", "Выполнение");
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "Задачи", "ИнтерактивноеВыполнение", "Инт. выполнение");
	
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "Отчеты", "Использование");
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "Отчеты", "Просмотр");
	
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "Обработки", "Использование");
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "Обработки", "Просмотр");
	
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "ВнешниеИсточникиДанных", "Использование");
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "ВнешниеИсточникиДанных", "Администрирование");
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "ВнешниеИсточникиДанных", "ИзменениеСтандартнойАутентификации", "Изм. стандартной аутентиф.");
	ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "ВнешниеИсточникиДанных", "ИзменениеСтандартнойАутентификацииСеанса", "Изм. стандартной аутентиф. сеанса");
	
	Если ВерсияПлатформы8_3 Тогда
		ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "РегистрыСведений", "УправлениеИтогами", "Управление итогами");
		ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "ВнешниеИсточникиДанных", "ИзменениеАутентификацииОССеанса", "Изм. аутентиф. ОС сеанса");
	КонецЕсли;
	
	Если ВерсияПлатформы8_3_3 Тогда
		
		ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "Справочники", "ИнтерактивноеУдалениеПредопределенныхДанных", "Инт. удаление предопр.");
		ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "Справочники", "ИнтерактивнаяПометкаУдаленияПредопределенныхДанных", "Инт. пом. удал. предопр.");
		ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "Справочники", "ИнтерактивноеСнятиеПометкиУдаленияПредопределенныхДанных", "Инт. снятие пом. удал. предопр.");
		ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "Справочники", "ИнтерактивноеУдалениеПомеченныхПредопределенныхДанных", "Инт. удал. помеченных предопр.");
		
		ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "ПланыСчетов", "ИнтерактивноеУдалениеПредопределенныхДанных", "Инт. удаление предопр.");
		ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "ПланыСчетов", "ИнтерактивнаяПометкаУдаленияПредопределенныхДанных", "Инт. пом. удал. предопр.");
		ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "ПланыСчетов", "ИнтерактивноеСнятиеПометкиУдаленияПредопределенныхДанных", "Инт. снятие пом. удал. предопр.");
		ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "ПланыСчетов", "ИнтерактивноеУдалениеПомеченныхПредопределенныхДанных", "Инт. удал. помеченных предопр.");
		
		ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "ПланыВидовХарактеристик", "ИнтерактивноеУдалениеПредопределенныхДанных", "Инт. удаление предопр.");
		ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "ПланыВидовХарактеристик", "ИнтерактивнаяПометкаУдаленияПредопределенныхДанных", "Инт. пом. удал. предопр.");
		ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "ПланыВидовХарактеристик", "ИнтерактивноеСнятиеПометкиУдаленияПредопределенныхДанных", "Инт. снятие пом. удал. предопр.");
		ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "ПланыВидовХарактеристик", "ИнтерактивноеУдалениеПомеченныхПредопределенныхДанных", "Инт. удал. помеченных предопр.");
		
		ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "ПланыВидовРасчета", "ИнтерактивноеУдалениеПредопределенныхДанных", "Инт. удаление предопр.");
		ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "ПланыВидовРасчета", "ИнтерактивнаяПометкаУдаленияПредопределенныхДанных", "Инт. пом. удал. предопр.");
		ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "ПланыВидовРасчета", "ИнтерактивноеСнятиеПометкиУдаленияПредопределенныхДанных", "Инт. снятие пом. удал. предопр.");
		ДобавитьСтрокуВТаблицуВидовДоступа(ТаблицаВидовДоступа, "ПланыВидовРасчета", "ИнтерактивноеУдалениеПомеченныхПредопределенныхДанных", "Инт. удал. помеченных предопр.");
		
	КонецЕсли;
	
	// ОБЩИЕ ПОЛЯ НАЛОЖЕНИЯ ОГРАНИЧЕНИЙ
	ПоляОграничений = Новый Соответствие;
	ПоляОграничений.Вставить("ПланыОбмена", "Ссылка,ВерсияДанных,ПометкаУдаления,НомерОтправленного,НомерПринятого");
	ПоляОграничений.Вставить("Справочники", "Ссылка,ВерсияДанных,ПометкаУдаления,Предопределенный");
	ПоляОграничений.Вставить("Документы", "Ссылка,ВерсияДанных,Дата,Проведен,ПометкаУдаления");
	ПоляОграничений.Вставить("ЖурналыДокументов", "Ссылка,Дата,Проведен,ПометкаУдаления");
	ПоляОграничений.Вставить("ПланыВидовХарактеристик", "Ссылка,ВерсияДанных,ТипЗначения,ПометкаУдаления,Предопределенный");
	ПоляОграничений.Вставить("ПланыСчетов", "Ссылка,ВерсияДанных,Вид,Забалансовый,ПометкаУдаления,Предопределенный");
	ПоляОграничений.Вставить("ПланыВидовРасчета", "Ссылка,ВерсияДанных,ПометкаУдаления,Предопределенный");
	ПоляОграничений.Вставить("БизнесПроцессы", "Ссылка,ВерсияДанных,Номер,Дата,ВедущаяЗадача,ПометкаУдаления,Стартован,Завершен");
	ПоляОграничений.Вставить("Задачи", "Ссылка,ВерсияДанных,Номер,Дата,ПометкаУдаления,Наименование,Выполнена");
	
	// регистры
	ТипыРегистров = ПолучитьМассивТиповРегистров();
	ТипыПодчиненныхОбъектов = Новый Массив;
	ТипыПодчиненныхОбъектов.Добавить("Измерения");
	ТипыПодчиненныхОбъектов.Добавить("Ресурсы");
	ТипыПодчиненныхОбъектов.Добавить("Реквизиты");
	Для Каждого ТипРегистра Из ТипыРегистров Цикл
		Для Каждого ОбъектМетаданных Из Метаданные[ТипРегистра] Цикл
			
			СтрокаПолей = "";
			Для Каждого ИмяТипаПодчиненного Из ТипыПодчиненныхОбъектов Цикл
				Для Каждого ПодчиненныйОъект Из ОбъектМетаданных[ИмяТипаПодчиненного] Цикл
					СтрокаПолей = ?(ПустаяСтрока(СтрокаПолей), "", ",") + ПодчиненныйОъект.Имя;
				КонецЦикла;
			КонецЦикла;
			ПоляОграничений.Вставить(ТипРегистра+"."+ОбъектМетаданных.Имя, СтрокаПолей);
			
		КонецЦикла;
	КонецЦикла;
	
	Возврат Новый Структура("ТаблицаОбъектовМетаданных,ТаблицаВидовДоступа,ПоляОграничений", ТаблицаОбъектовМетаданных, ТаблицаВидовДоступа, ПоляОграничений);
	
КонецФункции

Функция ПолучитьМассивТиповРегистров()
	
	ТипыРегистров = Новый Массив;
	ТипыРегистров.Добавить("РегистрыСведений");
	ТипыРегистров.Добавить("РегистрыНакопления");
	ТипыРегистров.Добавить("РегистрыБухгалтерии");
	ТипыРегистров.Добавить("РегистрыРасчета");
	
	Возврат ТипыРегистров;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ФОРМИРОВАНИЕ ПОЛНЫХ ТАБЛИЦ ПОЛНОМОЧИЙ

Процедура ЗаполнитьСписокОбъектовМетаданныхПоОписателю(СписокОбъектов, ОписаниеТипаМетаданных, ЭтоКонфигурация = Ложь)
	
	СписокОбъектов.Очистить();
	
	Если ЭтоКонфигурация Тогда
		СписокОбъектов.Добавить(Метаданные, "Права на конфигурацию");
		Возврат;
	КонецЕсли;
	
	Для Каждого ОбъектМетаданных Из Метаданные[ОписаниеТипаМетаданных.Имя] Цикл
		СписокОбъектов.Добавить(ОбъектМетаданных, "" + ОбъектМетаданных.Синоним + " (" + ОбъектМетаданных.Имя + ")");
		Если ОписаниеТипаМетаданных.Имя = "Подсистемы" И ОбъектМетаданных.Подсистемы.Количество() > 0 Тогда
			ДобавитьПодчиненныеОбъектыРекурсивно(СписокОбъектов, ОбъектМетаданных, "Подсистемы");
		КонецЕсли;
	КонецЦикла;
	СписокОбъектов.СортироватьПоПредставлению();
	
КонецПроцедуры

Процедура ДобавитьПодчиненныеОбъектыРекурсивно(СписокОбъектов, Знач ОбъектМетаданных, Знач ИмяПоля)
	
	Для Каждого ПодчиненныйОбъектМетаданных Из ОбъектМетаданных[ИмяПоля] Цикл
		СписокОбъектов.Добавить(ПодчиненныйОбъектМетаданных, "" + ПодчиненныйОбъектМетаданных.Синоним + " (" + ПодчиненныйОбъектМетаданных.Имя + ")");
		Если ПодчиненныйОбъектМетаданных[ИмяПоля].Количество() > 0 Тогда
			ДобавитьПодчиненныеОбъектыРекурсивно(СписокОбъектов, ПодчиненныйОбъектМетаданных, ИмяПоля);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция СформироватьТаблицуПравМетаданное(ТаблицаВидовДоступа, МассивРолей, ОписаниеТипаМетаданных, СписокОбъектов, ТипыРегистров = Неопределено, ПоляОграничений = Неопределено)
	
	ТаблицаПрав = Новый ТаблицаЗначений;
	
	ТаблицаПрав.Колонки.Добавить("НаименованиеЗаголовка", , ОписаниеТипаМетаданных.ЗаголовокШапки);
	ТаблицаПрав.Колонки.Добавить("ЕстьПраваНаОбъект");
	Для Каждого ОписательДоступа Из ТаблицаВидовДоступа Цикл
		ТаблицаПрав.Колонки.Добавить(ОписательДоступа.ПравоДоступа, , ОписательДоступа.Представление);
		Если ОписательДоступа.ПоддерживаетОграничения Тогда
			ТаблицаПрав.Колонки.Добавить("RLS"+ОписательДоступа.ПравоДоступа);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ЭлементСписка Из СписокОбъектов Цикл
	
		НоваяСтрока = ТаблицаПрав.Добавить();
		НоваяСтрока.НаименованиеЗаголовка = ЭлементСписка.Представление;
		
		ЕстьХотяБыОдноПраво = Ложь;
		Для Каждого ОписательДоступа Из ТаблицаВидовДоступа Цикл
			
			ЕстьПраво = Ложь;
			ЕстьОграничение = Ложь;
			ЕстьБезОграничения = Ложь;
			Для Каждого МетаРоль Из МассивРолей Цикл
				Если ПравоДоступа(ОписательДоступа.ПравоДоступа, ЭлементСписка.Значение, МетаРоль) Тогда
					ЕстьХотяБыОдноПраво = Истина;
					ЕстьПраво = Истина;
					Если ОписательДоступа.ПоддерживаетОграничения Тогда
						Если ТипыРегистров.Найти(ОписаниеТипаМетаданных.Имя) = Неопределено Тогда
							ПарамДост = ПараметрыДоступа(ОписательДоступа.ПравоДоступа, ЭлементСписка.Значение, ПоляОграничений[ОписаниеТипаМетаданных.Имя], МетаРоль);
						Иначе
							ПарамДост = ПараметрыДоступа(ОписательДоступа.ПравоДоступа, ЭлементСписка.Значение, ПоляОграничений[ОписаниеТипаМетаданных.Имя+"."+ЭлементСписка.Значение.Имя], МетаРоль);
						КонецЕсли;
						Если ПарамДост.ОграничениеУсловием Тогда
							ЕстьОграничение = Истина;
						Иначе
							ЕстьБезОграничения = Истина;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			ОграничениеУсловием = (ОписательДоступа.ПоддерживаетОграничения И ЕстьОграничение И НЕ ЕстьБезОграничения);
			Если ОписательДоступа.ПоддерживаетОграничения Тогда
				НоваяСтрока["RLS"+ОписательДоступа.ПравоДоступа] = ?(ОграничениеУсловием, "1", "");
			КонецЕсли;
			
			НоваяСтрока[ОписательДоступа.ПравоДоступа] = ?(ЕстьПраво, "+", "");
			
		КонецЦикла;
		
		НоваяСтрока.ЕстьПраваНаОбъект = ЕстьХотяБыОдноПраво;
		
	КонецЦикла;
	
	Возврат ТаблицаПрав;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция Версия() Экспорт
	
	// Изменил версию? - поправь синоним обработки! //***
	Возврат "3.1";
	
КонецФункции

Функция ПолучитьПользователяИБПоИмени(ИмяПользователя) Экспорт
	
	НайденныйПользователь = Неопределено;
	МассивПользователей = ПользователиИнформационнойБазы.ПолучитьПользователей();
	Для Каждого текПользователь Из МассивПользователей Цикл
		Если текПользователь.Имя = ИмяПользователя Тогда
			НайденныйПользователь = текПользователь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат НайденныйПользователь;
	
КонецФункции

Функция ПолучитьОбъектМетаданныхПоИмени(ИмяОбъекта, ТипМетаданных) Экспорт
	
	Возврат Метаданные[ТипМетаданных].Найти(ИмяОбъекта);
	
КонецФункции

// Возвращает список пользователей текущей ИБ
//
// Параметры
//
// Возвращаемое значение:
//   СписокЗначений   - список пользователей ИБ: Значение - Имя пользователя; Представление - синоним, как он задан в конфигураторе
//
Функция ПолучитьСписокПользователейИБ() Экспорт
	
	РезСписок = Новый СписокЗначений;
	
	МассивПользователей = ПользователиИнформационнойБазы.ПолучитьПользователей();
	Для Каждого Пользователь Из МассивПользователей Цикл
		РезСписок.Добавить(Пользователь.Имя, Пользователь.ПолноеИмя);
	КонецЦикла;
	
	РезСписок.СортироватьПоПредставлению();
	
	Возврат РезСписок;
	
КонецФункции

Функция МетаданныеРолиПоСпискуИмен(МассивИмен, РолиСтрокой)
	
	МассивРолей = Новый Массив;
	Для Каждого ИмяРоли Из МассивИмен Цикл
		МассивРолей.Добавить(ПолучитьОбъектМетаданныхПоИмени(ИмяРоли, "Роли"));
	КонецЦикла;
	
	Для Каждого МетаРоль Из МассивРолей Цикл
		РолиСтрокой = РолиСтрокой + ", " + МетаРоль.Синоним;
	КонецЦикла;
	
	Возврат МассивРолей;
	
КонецФункции 

// Возвращает список ролей текущей конфигурации
//
// Параметры
//
// Возвращаемое значение:
//   СписокЗначений   - список ролей: Значение - Имя роли; Представление - синоним, как он задан в конфигураторе
//
Функция ПолучитьСписокРолей() Экспорт
	
	РезСписок = Новый СписокЗначений;
	
	Для Каждого Роль Из Метаданные.Роли Цикл
		РезСписок.Добавить(Роль.Имя, Роль.Синоним);
	КонецЦикла;
	
	РезСписок.СортироватьПоПредставлению();
	
	Возврат РезСписок;
	
КонецФункции

Процедура ПроверитьВерсиюПлатформыПриЗапуске(Отказ) Экспорт
	
	СистемнаяИнформация = Новый СистемнаяИнформация();
	ВерсияПлатформы = СистемнаяИнформация.ВерсияПриложения;
	
	Поз = Найти(ВерсияПлатформы, ".");
	СтаршийНомерРедакции = Число(Сред(ВерсияПлатформы, 1, Поз-1));
	ВерсияПлатформы = Сред(ВерсияПлатформы, Поз+1);
	Поз = Найти(ВерсияПлатформы, ".");
	МладшийНомерРедакции = Число(Сред(ВерсияПлатформы, 1, Поз-1));
	ВерсияПлатформы = Сред(ВерсияПлатформы, Поз+1);
	Поз = Найти(ВерсияПлатформы, ".");
	НомерРелиза = Число(Сред(ВерсияПлатформы, 1, Поз-1));
	НомерСборки = Число(Сред(ВерсияПлатформы, Поз+1));
	
	Если СтаршийНомерРедакции <> 8 ИЛИ МладшийНомерРедакции < 2 Тогда
		ТекстОшибки = НСтр("ru = 'Не допустимая версия платформы 1С:Предприятия. Использование отчета невозможно'");
		#Если ТолстыйКлиентУправляемоеПриложение ИЛИ ТонкийКлиент ИЛИ ВебКлиент Тогда
			ПоказатьОповещениеПользователя(ТекстОшибки);
		#Иначе
			Сообщить(ТекстОшибки, СтатусСообщения.ОченьВажное);
		#КонецЕсли
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ВерсияПлатформы8_3 = (МладшийНомерРедакции >= 3);
	ВерсияПлатформы8_3_3 = ( (МладшийНомерРедакции = 3 И НомерРелиза >= 3) ИЛИ МладшийНомерРедакции > 3 );
	ВерсияПлатформы8_3_6 = ( (МладшийНомерРедакции = 3 И НомерРелиза >= 6) ИЛИ МладшийНомерРедакции > 3 );
	
КонецПроцедуры

Функция ПолучитьИзСтрокиТолькоЦифры(ИсходнаяСтрока)
	
	КопияСтроки = СокрЛП(ИсходнаяСтрока);
	ДлинаСтроки = СтрДлина(КопияСтроки);
	Результат = "";
	
	Для Сч = 1 По ДлинаСтроки Цикл
		
		Симв = Сред(КопияСтроки, Сч, 1);
		Если Найти("0123456789", Симв) > 0 Тогда
			Результат = Результат + Симв;
		КонецЕсли; 
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// РАБОТА С ТАБЛИЧНЫМ ДОКУМЕНТОМ

Функция ПолучитьСтруктуруОбластейВывода(пМакет)
	
	Результат = Новый Структура;
	Результат.Вставить("Роли",          пМакет.ПолучитьОбласть("Роли"));
	Результат.Вставить("Заголовок",     пМакет.ПолучитьОбласть("Заголовок"));
	Результат.Вставить("ШапкаНачало",   пМакет.ПолучитьОбласть("ШапкаТаблицы|Начало"));
	Результат.Вставить("ШапкаПраво",    пМакет.ПолучитьОбласть("ШапкаТаблицы|Право"));
	Результат.Вставить("СтрокаНачало",  пМакет.ПолучитьОбласть("СтрокаТаблицы|Начало"));
	Результат.Вставить("СтрокаПраво",   пМакет.ПолучитьОбласть("СтрокаТаблицы|Право"));
	Результат.Вставить("ПодвалНачало",  пМакет.ПолучитьОбласть("ПодвалТаблицы|Начало"));
	Результат.Вставить("ПодвалПраво",   пМакет.ПолучитьОбласть("ПодвалТаблицы|Право"));
	Результат.Вставить("СтрокаНачалоБ", пМакет.ПолучитьОбласть("СтрокаТаблицыБезПрав|Начало"));
	Результат.Вставить("СтрокаПравоБ",  пМакет.ПолучитьОбласть("СтрокаТаблицыБезПрав|Право"));
	
	Возврат Результат;
	
КонецФункции

// Формирует табличный документ готового отчета
//
// Параметры
//
// Возвращаемое значение:
//   ТабличныйДокумент   - Сформированный отчет
//
//
Функция ВывестиОтчетВТабличныйДокумент(пМассивИменРолей, СтруктураНастроек, СтруктураОтчета = Неопределено) Экспорт
	
	Перем ТабДок, Макет, ОбластиМакета;
	
	// инициализация табличного документа
	ТабДок = Новый ТабличныйДокумент;
	Макет = ПолучитьМакет("КартаПолномочий");
	ОбластиМакета = ПолучитьСтруктуруОбластейВывода(Макет);
	
	// инициализация общие
	СтрРоли = "";
	МассивРолей = МетаданныеРолиПоСпискуИмен(пМассивИменРолей, СтрРоли);
	СписокОбъектов = Новый СписокЗначений;
	
	// роли и настройки
	ОбластиМакета.Заголовок.Параметры.ВидМетаданных = "Роли";
	ТабДок.Вывести(ОбластиМакета.Заголовок);
	ТабДок.НачатьГруппуСтрок(, Ложь);
	ОбластиМакета.Роли.Параметры.Роли = Сред(СтрРоли, 3);
	ТабДок.Вывести(ОбластиМакета.Роли);
	ТабДок.ЗакончитьГруппуСтрок();
	
	Если СтруктураОтчета = Неопределено Тогда
		
		// права на конфигурацию
		ОписаниеТипаМетаданных = Новый Структура("Имя,Представление,ЗаголовокШапки", "Конфигурация", "Права на конфигурацию", "Права на конфигурацию");
		ЗаполнитьСписокОбъектовМетаданныхПоОписателю(СписокОбъектов, ОписаниеТипаМетаданных, Истина);
		ТаблицаВидовДоступа = ТаблицаПравКонфигурация();
		ТаблицаПрав = СформироватьТаблицуПравМетаданное(ТаблицаВидовДоступа, МассивРолей, ОписаниеТипаМетаданных, СписокОбъектов);
		ВывестиТаблицуЗначенийВТабличныйДокумент(ОписаниеТипаМетаданных.Представление, ТаблицаПрав, ТабДок, ОбластиМакета);
		
		// права на объекты метаданных
		ТаблицыОписаний = ТаблицаПравОбщие();
		ТаблицаОбъектовМетаданных = ТаблицыОписаний.ТаблицаОбъектовМетаданных;
		ТаблицаВидовДоступа = ТаблицыОписаний.ТаблицаВидовДоступа;
		ПоляОграничений = ТаблицыОписаний.ПоляОграничений;
		ТипыРегистров = ПолучитьМассивТиповРегистров();
		
		Для Каждого ОписаниеТипаМетаданных Из ТаблицаОбъектовМетаданных Цикл
			ЗаполнитьСписокОбъектовМетаданныхПоОписателю(СписокОбъектов, ОписаниеТипаМетаданных);
			МассивСтрок = ТаблицаВидовДоступа.НайтиСтроки(Новый Структура("ВидМетаданных", ОписаниеТипаМетаданных.Имя));
			ТаблицаПрав = СформироватьТаблицуПравМетаданное(МассивСтрок, МассивРолей, ОписаниеТипаМетаданных, СписокОбъектов, ТипыРегистров, ПоляОграничений);
			ВывестиТаблицуЗначенийВТабличныйДокумент(ОписаниеТипаМетаданных.Представление, ТаблицаПрав, ТабДок, ОбластиМакета, СтруктураНастроек.НеВыводитьОбъектБезПрав);
		КонецЦикла;
		
	Иначе
		
		// права на конфигурацию и объекты метаданных
		Для Каждого КлючИЗначение Из СтруктураОтчета Цикл
			ИмяКлюча = КлючИЗначение.Ключ;
			Если Найти(ИмяКлюча, "ТаблицаПрав") = 0 Тогда
				Продолжить;
			КонецЕсли;
			ТаблицаПрав = КлючИЗначение.Значение;
			ВывестиТаблицуЗначенийВТабличныйДокумент(Сред(ИмяКлюча, 12), ТаблицаПрав, ТабДок, ОбластиМакета, СтруктураНастроек.НеВыводитьОбъектБезПрав);
		КонецЦикла;
		
	КонецЕсли;
	
	// завершение
	Возврат ТабДок;
	
КонецФункции

Процедура ВывестиТаблицуЗначенийВТабличныйДокумент(Заголовок, ТаблицаДляВывода, ТабДок, ОбластиМакета, НеВыводитьОбъектБезПрав = Ложь)
	
	Если (ТаблицаДляВывода.Количество() = 0)
		ИЛИ (НеВыводитьОбъектБезПрав И ТаблицаДляВывода.Найти(Истина, "ЕстьПраваНаОбъект") = Неопределено) Тогда
		Возврат;
	КонецЕсли;
	
	ОбластиМакета.Заголовок.Параметры.ВидМетаданных = Заголовок;
	ТабДок.Вывести(ОбластиМакета.Заголовок);
	
	ТабДок.НачатьГруппуСтрок(,Ложь);
	
	Колонки = ТаблицаДляВывода.Колонки;
	КолонкаЗаголовок = Колонки.Найти("НаименованиеЗаголовка");
	
	// шапка
	ОблШапкаНачало = ОбластиМакета.ШапкаНачало;
	ОблШапкаПраво = ОбластиМакета.ШапкаПраво;
	
	ОблШапкаНачало.Параметры.ЗаголовокШапки = КолонкаЗаголовок.Заголовок;
	ТабДок.Вывести(ОблШапкаНачало);
	Для Каждого КолонкаТаблицы Из Колонки Цикл
		Если КолонкаТаблицы.Имя = "НаименованиеЗаголовка" ИЛИ КолонкаТаблицы.Имя = "ЕстьПраваНаОбъект"
			ИЛИ Сред(КолонкаТаблицы.Имя, 1, 3) = "RLS" Тогда
			Продолжить;
		КонецЕсли;
		ОблШапкаПраво.Параметры.ПравоДоступа = КолонкаТаблицы.Заголовок;
		ТабДок.Присоединить(ОблШапкаПраво);
	КонецЦикла;
	
	// многострочная часть
	Для Каждого СтрокаТаблицы Из ТаблицаДляВывода Цикл
		
		Если НеВыводитьОбъектБезПрав И НЕ СтрокаТаблицы.ЕстьПраваНаОбъект Тогда
			Продолжить;
		КонецЕсли;
		
		ОбластьНачало = ?(СтрокаТаблицы.ЕстьПраваНаОбъект, ОбластиМакета.СтрокаНачало, ОбластиМакета.СтрокаНачалоБ);
		ОбластьПраво = ?(СтрокаТаблицы.ЕстьПраваНаОбъект, ОбластиМакета.СтрокаПраво, ОбластиМакета.СтрокаПравоБ);
		
		ОбластьНачало.Параметры.ТипОбъекта = СтрокаТаблицы.НаименованиеЗаголовка;
		ТабДок.Вывести(ОбластьНачало);
		Для Каждого КолонкаТаблицы Из Колонки Цикл
			Если КолонкаТаблицы.Имя = "НаименованиеЗаголовка" ИЛИ КолонкаТаблицы.Имя = "ЕстьПраваНаОбъект"
				ИЛИ Сред(КолонкаТаблицы.Имя, 1, 3) = "RLS" Тогда
				Продолжить;
			КонецЕсли;
			КолонкаRLS = Колонки.Найти("RLS"+КолонкаТаблицы.Имя);
			Если КолонкаRLS <> Неопределено И СтрокаТаблицы["RLS"+КолонкаТаблицы.Имя] = "1" Тогда
				ОбластьПраво.ТекущаяОбласть.ЦветФона = WebЦвета.СветлоСерый;
			Иначе
				ОбластьПраво.ТекущаяОбласть.ЦветФона = WebЦвета.Белый;
			КонецЕсли;
			ОбластьПраво.Параметры.Право = СтрокаТаблицы[КолонкаТаблицы.Имя];
			ТабДок.Присоединить(ОбластьПраво);
		КонецЦикла;
		
	КонецЦикла;
	
	// подвал
	ОблПодвалНачало = ОбластиМакета.ПодвалНачало;
	ОблПодвалПраво = ОбластиМакета.ПодвалПраво;
	
	ТабДок.Вывести(ОблПодвалНачало);
	Для Каждого КолонкаТаблицы Из Колонки Цикл
		Если КолонкаТаблицы.Имя = "НаименованиеЗаголовка" ИЛИ КолонкаТаблицы.Имя = "ЕстьПраваНаОбъект"
			ИЛИ Сред(КолонкаТаблицы.Имя, 1, 3) = "RLS" Тогда
			Продолжить;
		КонецЕсли;
		ТабДок.Присоединить(ОблПодвалПраво);
	КонецЦикла;
	
	ТабДок.ЗакончитьГруппуСтрок();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// РАБОТА С XML

// ЗАПИСЬ В XML

// Создание и открытие на запись потока данных xml
//
// Параметры
//  ПутьКФайлу  - Строка - Полный путь к файлу xml для записи
//  ФайлXML  - ЗаписьXML - Переменная, в которой будет возвращен инициированный файл xml,
//                 открытый для записи
//
// Возвращаемое значение:
//   Булево   - Истина, если функция отработала успешно, Ложь - в противном случае
//
Функция СоздатьФайлXMLДляЗаписи(ПутьКФайлу, ФайлXML) Экспорт
	
	ФайлXML = Новый Файл(ПутьКФайлу);
	Если (ФайлXML.Существует()) Тогда
		УдалитьФайлы(ФайлXML.ПолноеИмя);
	Иначе
		СоздатьКаталог(ФайлXML.Путь);
	КонецЕсли;
	
	Успех = Истина;
	ТекстОшибки = "";
	ФайлXML = Новый ЗаписьXML;
	Попытка
		ФайлXML.ОткрытьФайл(ПутьКФайлу);
		ФайлXML.ЗаписатьОбъявлениеXML();
	Исключение
		Успех = Ложь;
		ТекстОшибки = ОписаниеОшибки();
	КонецПопытки;
	
	Если НЕ Успех Тогда
		ТекстСообщения = НСтр("ru = 'Ошибка создания файла выгрузки'") + ?(ПустаяСтрока(ТекстОшибки), "", ": " + ТекстОшибки);
		#Если ТолстыйКлиентУправляемоеПриложение ИЛИ ТонкийКлиент ИЛИ ВебКлиент Тогда
			ПоказатьОповещениеПользователя(ТекстСообщения);
		#Иначе
			Сообщить(ТекстСообщения, СтатусСообщения.ОченьВажное);
		#КонецЕсли
	Иначе
		ФайлXML.ЗаписатьНачалоЭлемента("КартаПолномочийРолейПользователей");
		ФайлXML.ЗаписатьАтрибут("ВерсияОтчета", XMLСтрока(Версия()));
		СистемнаяИнформация = Новый СистемнаяИнформация();
		ФайлXML.ЗаписатьАтрибут("ВерсияПлатформы", XMLСтрока(СистемнаяИнформация.ВерсияПриложения));
	КонецЕсли;
	
	Возврат Успех;
	
КонецФункции

Процедура ЗакрытьФайлXMLПослеЗаписи(ФайлXML)
	
	ФайлXML.ЗаписатьКонецЭлемента();
	ФайлXML.Закрыть();
	
КонецПроцедуры

// Добавление одного элемента xml
//
// Параметры
//  ФайлXML  - ЗаписьXML - Инициированный файл xml, открытый на запись
//  ИмяЭлемента  - Строка - Имя для нового узла xml, в которое будет
//                 записано значение
//  ЗначениеЭлемента  - Произвольный - Записываемое значение в новый узел xml.
//                 Поддерживаются только типы значений, сериализуемые в xml
//  ЗаписыватьПустоеЗначение  - Булево - Признак необходимости записи значения, даже если оно не заполнено.
//                 (пустая строка или нулевое число). Значение по умолчанию: Ложь
//
Процедура ДобавитьЭлементВXMLФайл(ФайлXML, ИмяЭлемента, ЗначениеЭлемента, ЗаписыватьПустоеЗначение = Ложь)
	
	Если НЕ ЗначениеЗаполнено(ЗначениеЭлемента) И НЕ ЗаписыватьПустоеЗначение Тогда
		Возврат;
	КонецЕсли;
	
	ТипЗначенияXML = XMLТипЗнч(ЗначениеЭлемента);
	Попытка
		URIПространстваИмен = ТипЗначенияXML.URIПространстваИмен;
		ИмяТипа = ТипЗначенияXML.ИмяТипа;
	Исключение
		Возврат;
	КонецПопытки;
	
	ФайлXML.ЗаписатьНачалоЭлемента(ИмяЭлемента);
	Если ТипЗнч(ЗначениеЭлемента) <> Тип("Строка") Тогда
		ФайлXML.ЗаписатьАтрибут("Тип", URIПространстваИмен, ИмяТипа);
	КонецЕсли;
	ФайлXML.ЗаписатьАтрибут("Значение", XMLСтрока(ЗначениеЭлемента));
	ФайлXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

Процедура ДобавитьТаблицуЗначенийВXML(ФайлXML, ИмяЭлемента, ЭлементТаблица, ЗаписыватьПустоеЗначение = Ложь, НеВыводитьОбъектБезПрав = Ложь) Экспорт
	
	Если ЭлементТаблица.Количество() = 0 И НЕ ЗаписыватьПустоеЗначение Тогда
		Возврат;
	КонецЕсли;
	
	Если НеВыводитьОбъектБезПрав Тогда
		Если ЭлементТаблица.Найти(Истина, "ЕстьПраваНаОбъект") = Неопределено Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ФайлXML.ЗаписатьНачалоЭлемента(ИмяЭлемента);
	
	ФайлXML.ЗаписатьАтрибут("ТипПроизвольнойКоллекции", "ТаблицаЗначений");
	
	ФайлXML.ЗаписатьНачалоЭлемента("Колонки");
	ВсегоКолонок = ЭлементТаблица.Колонки.Количество();
	ИменаКолонок = Новый Соответствие;
	Для Инд = 0 По ВсегоКолонок - 1 Цикл
		ФайлXML.ЗаписатьНачалоЭлемента("Колонка"+ПолучитьИзСтрокиТолькоЦифры(Строка(Инд)));
		ИмяКолонки = ЭлементТаблица.Колонки[Инд].Имя;
		ЗаголовокКолонки = ЭлементТаблица.Колонки[Инд].Заголовок;
		ФайлXML.ЗаписатьАтрибут("Имя", XMLСтрока(ИмяКолонки));
		ФайлXML.ЗаписатьАтрибут("Заголовок", XMLСтрока(ЗаголовокКолонки));
		ФайлXML.ЗаписатьКонецЭлемента();
		ИменаКолонок.Вставить(Инд, ИмяКолонки);
	КонецЦикла;
	ФайлXML.ЗаписатьКонецЭлемента();
	
	Для Каждого СтрокаТаблицы Из ЭлементТаблица Цикл
		Если НеВыводитьОбъектБезПрав Тогда
			Если НЕ СтрокаТаблицы.ЕстьПраваНаОбъект Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		ФайлXML.ЗаписатьНачалоЭлемента("Строка");
		Для Инд = 0 По ВсегоКолонок - 1 Цикл
			ИмяКолонки = ИменаКолонок[Инд];
			ДобавитьПроизвольноеЗначениеВXML(ФайлXML, ИмяКолонки, СтрокаТаблицы[ИмяКолонки], ЗаписыватьПустоеЗначение);
		КонецЦикла;
		ФайлXML.ЗаписатьКонецЭлемента();
	КонецЦикла;
	
	ФайлXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

// <Описание процедуры>
//
// Параметры
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
//
Процедура ДобавитьМассивЗначенийВXML(ФайлXML, ИмяЭлемента, ЗначениеЭлемента, ЗаписыватьПустоеЗначение = Истина)
	
	Если ЗначениеЭлемента.Количество() = 0 И НЕ ЗаписыватьПустоеЗначение Тогда
		Возврат;
	КонецЕсли;
	
	ФайлXML.ЗаписатьНачалоЭлемента(ИмяЭлемента);
	ФайлXML.ЗаписатьАтрибут("ТипПроизвольнойКоллекции", "Массив");
	
	Для Каждого ЭлементМассива Из ЗначениеЭлемента Цикл
		ДобавитьПроизвольноеЗначениеВXML(ФайлXML, "Элемент", ЭлементМассива, ЗаписыватьПустоеЗначение);
	КонецЦикла;
	
	ФайлXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

// <Описание процедуры>
//
// Параметры
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
//
Процедура ДобавитьСтруктуруЗначенийВXML(ФайлXML, ИмяЭлемента, ЗначениеЭлемента, ЗаписыватьПустоеЗначение = Истина)
	
	Если ЗначениеЭлемента.Количество() = 0 И НЕ ЗаписыватьПустоеЗначение Тогда
		Возврат;
	КонецЕсли;
	
	ФайлXML.ЗаписатьНачалоЭлемента(ИмяЭлемента);
	ФайлXML.ЗаписатьАтрибут("ТипПроизвольнойКоллекции", "Структура");
	
	Для Каждого КлючИЗначение Из ЗначениеЭлемента Цикл
		ДобавитьПроизвольноеЗначениеВXML(ФайлXML, КлючИЗначение.Ключ, КлючИЗначение.Значение, ЗаписыватьПустоеЗначение);
	КонецЦикла;
	
	ФайлXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

Процедура ДобавитьПроизвольноеЗначениеВXML(ФайлXML, ИмяЭлемента, ЗначениеЭлемента, ЗаписыватьПустоеЗначение = Ложь)
	
	Если ТипЗнч(ЗначениеЭлемента) = Тип("ТаблицаЗначений") Тогда
		ДобавитьТаблицуЗначенийВXML(ФайлXML, ИмяЭлемента, ЗначениеЭлемента, ЗаписыватьПустоеЗначение);
	ИначеЕсли ТипЗнч(ЗначениеЭлемента) = Тип("Массив") Тогда
		ДобавитьМассивЗначенийВXML(ФайлXML, ИмяЭлемента, ЗначениеЭлемента, ЗаписыватьПустоеЗначение);
	ИначеЕсли ТипЗнч(ЗначениеЭлемента) = Тип("Структура") Тогда
		ДобавитьСтруктуруЗначенийВXML(ФайлXML, ИмяЭлемента, ЗначениеЭлемента, ЗаписыватьПустоеЗначение);
	Иначе
		ДобавитьЭлементВXMLФайл(ФайлXML, ИмяЭлемента, ЗначениеЭлемента, ЗаписыватьПустоеЗначение);
	КонецЕсли;
	
КонецПроцедуры

// Вывод полного отчета по карте ролей и полномочий в файл xml
//
// Параметры
//  МассивИменРолей  - Массив - Массив имен ролей (строка), согласно настройкам выводимого отчета
//  ФайлXML  - ЗаписьXML - Файл xml для вывода отчета
//
Процедура ВывестиОтчетВXML(пМассивИменРолей, СтруктураНастроек) Экспорт
	
	Перем ФайлXML;
	
	// инициализация xml
	Если НЕ СоздатьФайлXMLДляЗаписи(СтруктураНастроек.ПутьКФайлу, ФайлXML) Тогда
		Возврат;
	КонецЕсли;
	
	// инициализация общие
	СтрРоли = "";
	МассивРолей = МетаданныеРолиПоСпискуИмен(пМассивИменРолей, СтрРоли);
	СписокОбъектов = Новый СписокЗначений;
	
	// роли и настройки
	ДобавитьПроизвольноеЗначениеВXML(ФайлXML, "Роли", пМассивИменРолей, Истина);
	ДобавитьПроизвольноеЗначениеВXML(ФайлXML, "Настройки", СтруктураНастроек, Истина);
	
	// права на конфигурацию
	ОписаниеТипаМетаданных = Новый Структура("Имя,Представление,ЗаголовокШапки", "Конфигурация", "Права на конфигурацию", "Права на конфигурацию");
	ЗаполнитьСписокОбъектовМетаданныхПоОписателю(СписокОбъектов, ОписаниеТипаМетаданных, Истина);
	ТаблицаВидовДоступа = ТаблицаПравКонфигурация();
	ТаблицаПрав = СформироватьТаблицуПравМетаданное(ТаблицаВидовДоступа, МассивРолей, ОписаниеТипаМетаданных, СписокОбъектов);
	ДобавитьПроизвольноеЗначениеВXML(ФайлXML, "Конфигурация", ТаблицаПрав);
	
	// права на объекты метаданных
	ТаблицыОписаний = ТаблицаПравОбщие();
	ТаблицаОбъектовМетаданных = ТаблицыОписаний.ТаблицаОбъектовМетаданных;
	ТаблицаВидовДоступа = ТаблицыОписаний.ТаблицаВидовДоступа;
	ПоляОграничений = ТаблицыОписаний.ПоляОграничений;
	ТипыРегистров = ПолучитьМассивТиповРегистров();
	
	Для Каждого ОписаниеТипаМетаданных Из ТаблицаОбъектовМетаданных Цикл
		ЗаполнитьСписокОбъектовМетаданныхПоОписателю(СписокОбъектов, ОписаниеТипаМетаданных);
		МассивСтрок = ТаблицаВидовДоступа.НайтиСтроки(Новый Структура("ВидМетаданных", ОписаниеТипаМетаданных.Имя));
		ТаблицаПрав = СформироватьТаблицуПравМетаданное(МассивСтрок, МассивРолей, ОписаниеТипаМетаданных, СписокОбъектов, ТипыРегистров, ПоляОграничений);
		Если (ТаблицаПрав.Количество() = 0)
			ИЛИ (СтруктураНастроек.НеВыводитьОбъектБезПрав И ТаблицаПрав.Найти(Истина, "ЕстьПраваНаОбъект") = Неопределено) Тогда
			Продолжить;
		КонецЕсли;
		ДобавитьТаблицуЗначенийВXML(ФайлXML, ОписаниеТипаМетаданных.Имя, ТаблицаПрав, , СтруктураНастроек.НеВыводитьОбъектБезПрав);
	КонецЦикла;
	
	// завершение
	ЗакрытьФайлXMLПослеЗаписи(ФайлXML);
	
КонецПроцедуры

// ЧТЕНИЕ ИЗ XML

// Открытие на чтение из файла потока данных xml
//
// Параметры
//  ПутьКФайлу  - Строка - Полный путь к файлу xml для чтения
//  ФайлXML  - ЗаписьXML - Переменная, в которой будет возвращен инициированный файл xml,
//                 открытый для чтения
//
// Возвращаемое значение:
//   Булево   - Истина, если функция отработала успешно, Ложь - в противном случае
//
Функция ОткрытьФайлXMLНаЧтение(ПутьКФайлу, ФайлXML)
	
	Файл = Новый Файл(ПутьКФайлу);
	Если НЕ Файл.Существует() ИЛИ Файл.ЭтоКаталог() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Успех = Истина;
	ФайлXML = Новый ЧтениеXML;
	
	Попытка
		ФайлXML.ОткрытьФайл(ПутьКФайлу);
	Исключение
		ТекстСообщения = НСтр("ru = 'Не удалось открыть файл на чтение: '") + ОписаниеОшибки();
		#Если ТолстыйКлиентУправляемоеПриложение ИЛИ ТонкийКлиент ИЛИ ВебКлиент Тогда
			ПоказатьОповещениеПользователя(ТекстСообщения);
		#Иначе
			Сообщить(ТекстСообщения, СтатусСообщения.ОченьВажное);
		#КонецЕсли
		Успех = Ложь;
	КонецПопытки;
	
	Если ФайлXML = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Ошибка при открытии файла загрузки.'");
		#Если ТолстыйКлиентУправляемоеПриложение ИЛИ ТонкийКлиент ИЛИ ВебКлиент Тогда
			ПоказатьОповещениеПользователя(ТекстСообщения);
		#Иначе
			Сообщить(ТекстСообщения, СтатусСообщения.ОченьВажное);
		#КонецЕсли
		Успех = Ложь;
	КонецЕсли;
	
	Возврат Успех;
	
КонецФункции

// <Описание функции>
//
// Параметры
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
//
Функция ПрочитатьЭлементИзXML(ФайлXML, ИмяУзла)
	
	Результат = ФайлXML.ПолучитьАтрибут("Значение");
	ПрочитанныйТип = ФайлXML.ПолучитьАтрибут("Тип");
	
	Если ПрочитанныйТип <> Неопределено Тогда
		Результат = XMLЗначение(ПрочитанныйТип, Результат);
	КонецЕсли;
	
	Пока ФайлXML.Прочитать() Цикл
		Если ФайлXML.ТипУзла = ТипУзлаXML.КонецЭлемента И ФайлXML.Имя = ИмяУзла Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// <Описание функции>
//
// Параметры
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
//
Функция ПрочитатьМассивИзXML(ФайлXML, ИмяУзла)
	
	Результат = Новый Массив;
	
	Пока ФайлXML.Прочитать() Цикл
		
		Если ФайлXML.ТипУзла = ТипУзлаXML.КонецЭлемента И ФайлXML.Имя = ИмяУзла Тогда
			Прервать;
		КонецЕсли;
		
		Если ФайлXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ФайлXML.Имя = "Элемент" Тогда
			Результат.Добавить(ПрочитатьПроизвольноеЗначениеИзXML(ФайлXML, "Элемент"));
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// <Описание функции>
//
// Параметры
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
//
Функция ПрочитатьСтруктуруИзXML(ФайлXML, ИмяУзла)
	
	Результат = Новый Структура;
	
	Пока ФайлXML.Прочитать() Цикл
		
		Если ФайлXML.ТипУзла = ТипУзлаXML.КонецЭлемента И ФайлXML.Имя = ИмяУзла Тогда
			Прервать;
		КонецЕсли;
		
		Если ФайлXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			Результат.Вставить(ФайлXML.Имя, ПрочитатьПроизвольноеЗначениеИзXML(ФайлXML, ФайлXML.Имя));
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// <Описание функции>
//
// Параметры
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
//
Функция ПрочитатьТаблицуЗначенийИзXML(ФайлXML, ИмяУзлаТаблица)
	
	Результат = Новый ТаблицаЗначений;
	ИменаКолонок = Новый Массив;
	
	Пока ФайлXML.Прочитать() Цикл
		
		Если ФайлXML.ТипУзла = ТипУзлаXML.КонецЭлемента И ФайлXML.Имя = ИмяУзлаТаблица Тогда
			Прервать;
		КонецЕсли;
		
		// колонки
		Если ФайлXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ФайлXML.Имя = "Колонки" Тогда
			
			Пока ФайлXML.Прочитать() Цикл
				
				Если ФайлXML.ТипУзла = ТипУзлаXML.КонецЭлемента И ФайлXML.Имя = "Колонки" Тогда
					Прервать;
				КонецЕсли;
				
				Если ФайлXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И Найти(ФайлXML.Имя, "Колонка") = 1 Тогда
					
					ИмяУзлаКолонка = ФайлXML.Имя;
					ИмяКолонки = ФайлXML.ПолучитьАтрибут("Имя");
					ЗаголовокКолонки = ФайлXML.ПолучитьАтрибут("Заголовок");
					Если ИмяКолонки <> Неопределено Тогда
						Результат.Колонки.Добавить(ИмяКолонки, , ЗаголовокКолонки);
						ИменаКолонок.Добавить(ИмяКолонки);
					КонецЕсли;
					
					Пока ФайлXML.Прочитать() Цикл
						Если ФайлXML.ТипУзла = ТипУзлаXML.КонецЭлемента И ФайлXML.Имя = ИмяУзлаКолонка Тогда
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		// строки
		Если ФайлXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ФайлXML.Имя = "Строка" Тогда
			
			НоваяСтрокаТаблицы = Результат.Добавить();
			
			Пока ФайлXML.Прочитать() Цикл
				
				Если ФайлXML.ТипУзла = ТипУзлаXML.КонецЭлемента И ФайлXML.Имя = "Строка" Тогда
					Прервать;
				КонецЕсли;
				
				Если ФайлXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ИменаКолонок.Найти(ФайлXML.Имя) <> Неопределено Тогда
					ИмяУзлаЭлемент = ФайлXML.Имя;
					НоваяСтрокаТаблицы[ИмяУзлаЭлемент] = ПрочитатьПроизвольноеЗначениеИзXML(ФайлXML, ИмяУзлаЭлемент);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// <Описание функции>
//
// Параметры
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
//
Функция ПрочитатьПроизвольноеЗначениеИзXML(ФайлXML, ИмяУзла)
	
	ТипКоллекции = ФайлXML.ПолучитьАтрибут("ТипПроизвольнойКоллекции");
	
	Если ТипКоллекции = Неопределено Тогда
		Возврат ПрочитатьЭлементИзXML(ФайлXML, ИмяУзла);
	ИначеЕсли ТипКоллекции = "Массив" Тогда
		Возврат ПрочитатьМассивИзXML(ФайлXML, ИмяУзла);
	ИначеЕсли ТипКоллекции = "Структура" Тогда
		Возврат ПрочитатьСтруктуруИзXML(ФайлXML, ИмяУзла);
	ИначеЕсли ТипКоллекции = "ТаблицаЗначений" Тогда
		Возврат ПрочитатьТаблицуЗначенийИзXML(ФайлXML, ИмяУзла);
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Чтение структуры отчета из сохраненного ранее файла xml, и его вывод
//
// Параметры
//  СтруктураНастроек  - Структура - Настройки параметров чтения файла,
//                 содержить единственное значение ПутьКФайлу - строка,
//                 полный путь к файлу xml со структурой отчета
//
// Возвращаемое значение:
//   Структура   - Прочитанная из файла структура настроек отчета
//
Функция ПрочитатьОтчетИзФайлаXML(СтруктураНастроек) Экспорт
	
	Перем ФайлXML;
	
	// инициализация xml
	Если НЕ ОткрытьФайлXMLНаЧтение(СтруктураНастроек.ПутьКФайлу, ФайлXML) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТаблицаОбъектовМетаданных = ТаблицаПравОбщие().ТаблицаОбъектовМетаданных;
	ИменаТиповМетаданных = ТаблицаОбъектовМетаданных.ВыгрузитьКолонку("Имя");
	ИменаТиповМетаданных.Добавить("Конфигурация");
	
	СтруктураОтчета = Новый Структура;
	
	Пока ФайлXML.Прочитать() Цикл
		
		Если ФайлXML.ТипУзла = ТипУзлаXML.КонецЭлемента И ФайлXML.Имя = "КартаПолномочийРолейПользователей" Тогда
			Прервать;
		КонецЕсли;
		
		Если ФайлXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ФайлXML.Имя = "КартаПолномочийРолейПользователей" Тогда
			
			СтруктураОтчета.Вставить("ВерсияОтчета", ФайлXML.ПолучитьАтрибут("ВерсияОтчета"));
			СтруктураОтчета.Вставить("ВерсияПлатформы", ФайлXML.ПолучитьАтрибут("ВерсияПлатформы"));
			
			Пока ФайлXML.Прочитать() Цикл
				
				Если ФайлXML.ТипУзла = ТипУзлаXML.КонецЭлемента И ФайлXML.Имя = "КартаПолномочийРолейПользователей" Тогда
					Прервать;
				КонецЕсли;
				
				// роли и настройки
				Если ФайлXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ФайлXML.Имя = "Роли" Тогда
					МассивИменРолей = ПрочитатьПроизвольноеЗначениеИзXML(ФайлXML, "Роли");
					СтруктураОтчета.Вставить("МассивИменРолей", МассивИменРолей);
				КонецЕсли;
				
				Если ФайлXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ФайлXML.Имя = "Настройки" Тогда
					СтруктураНастроек = ПрочитатьПроизвольноеЗначениеИзXML(ФайлXML, "Настройки");
				КонецЕсли;
				
				// права на конфигурацию и объекты метаданных
				Если ФайлXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ИменаТиповМетаданных.Найти(ФайлXML.Имя) <> Неопределено Тогда
					ИмяУзлаМетаданное = ФайлXML.Имя;
					ТаблицаПрав = ПрочитатьПроизвольноеЗначениеИзXML(ФайлXML, ИмяУзлаМетаданное);
					СтруктураОтчета.Вставить("ТаблицаПрав"+ИмяУзлаМетаданное, ТаблицаПрав.Скопировать());
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ФайлXML.Закрыть();
	
	ТабДок = ВывестиОтчетВТабличныйДокумент(МассивИменРолей, СтруктураНастроек, СтруктураОтчета);
	
	Возврат Новый Структура("ТабДок,СтруктураНастроек", ТабДок, СтруктураНастроек);
	
КонецФункции
